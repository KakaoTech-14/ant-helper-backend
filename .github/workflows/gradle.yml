name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: backend

    - name: Create application-db.properties
      run: echo "${{ secrets.DB_PROPERTIES }}" > backend/src/main/resources/application-db.properties

    - name: Create application-security.properties
      run: echo "${{ secrets.SECURITY_PROPERTIES }}" > backend/src/main/resources/application-security.properties

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build -x test
      working-directory: backend

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: backend/build/libs/backend-0.0.1-SNAPSHOT.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-jar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload and Deploy JAR to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ubuntu
        EC2_KEY: ${{ secrets.EC2_KEY }}
      run: |
        echo "${{ secrets.EC2_KEY }}" > key.pem
        chmod 400 key.pem

        # Upload JAR to EC2
        scp -o StrictHostKeyChecking=no -i key.pem backend-0.0.1-SNAPSHOT.jar ubuntu@$EC2_HOST:/home/ubuntu/project/backend/build/libs/

        # Connect to EC2 and run the application
        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_HOST << 'EOF'
          cd /home/ubuntu/project/backend || exit 1
          pkill -f 'java -jar build/libs/backend-0.0.1-SNAPSHOT.jar' || true
          nohup java -jar build/libs/backend-0.0.1-SNAPSHOT.jar > /home/ubuntu/nohup.out 2>&1 &
        EOF

        rm key.pem

name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: backend

    - name: Create application-dev.properties
      run: echo "${{ secrets.APPLICATION_DEV_PROPERTIES }}" > backend/src/main/resources/application-dev.properties

    - name: Create application-common.properties
      run: echo "${{ secrets.APPLICATION_COMMON_PROPERTIES }}" > backend/src/main/resources/application-common.properties

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build -x test
      working-directory: backend

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest backend/
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: SSH into EC2 and Deploy Docker Container
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ubuntu
        EC2_KEY: ${{ secrets.EC2_KEY }}
      run: |
        echo "${{ secrets.EC2_KEY }}" > key.pem
        chmod 400 key.pem

        # 기존 컨테이너 중지 및 삭제
        ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST "docker stop backend_container || true && docker rm backend_container || true"

        # Docker Hub에서 최신 이미지 Pull
        ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST "docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest"

        # Docker 컨테이너 실행
        ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << 'EOF'
          docker run -d -p 8080:8080 --name backend_container \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_PATH=${{ secrets.DB_PATH }} \
            ${{ secrets.DOCKER_USERNAME }}/backend:latest
        EOF

        # SSH 연결 종료 후 key.pem 삭제
        rm key.pem

        # 서버 연결 확인
        sleep 50
        curl -f http://$EC2_HOST:8080 || echo "Server connection failed"
